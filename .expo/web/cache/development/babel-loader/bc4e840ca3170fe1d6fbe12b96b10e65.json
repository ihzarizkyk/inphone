{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport { Center, HStack, Text, Box, Image, AspectRatio, Heading, Spinner, FlatList } from \"native-base\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Header } from \"../components\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar RecipeScreen = function RecipeScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFetching = _useState6[0],\n      setFetching = _useState6[1];\n\n  var getResepData = function getResepData() {\n    var response, json;\n    return _regeneratorRuntime.async(function getResepData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"\"));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            json = _context.sent;\n            setData(json.results);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 13:\n            _context.prev = 13;\n            setLoading(false);\n            setFetching(false);\n            return _context.finish(13);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10, 13, 17]], Promise);\n  };\n\n  var refreshRecipe = function refreshRecipe() {\n    setFetching(true);\n    getResepData();\n  };\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return navigation.navigate(\"RecipeDetail\", {\n          resepKey: item.key\n        });\n      },\n      children: _jsxs(Box, {\n        p: 5,\n        children: [_jsxs(Box, {\n          bg: \"white\",\n          borderWidth: 1,\n          borderColor: \"gray.300\",\n          children: [_jsxs(Box, {\n            children: [_jsx(AspectRatio, {\n              w: \"100%\",\n              ratio: 16 / 9,\n              children: _jsx(Image, {\n                source: {\n                  uri: item.thumb\n                },\n                alt: \"thumbnail resep\"\n              })\n            }), _jsx(Box, {\n              position: \"absolute\",\n              bottom: 0,\n              left: 0,\n              p: 2,\n              bg: \"#fe7100\",\n              children: _jsx(Text, {\n                children: item.dificulty\n              })\n            })]\n          }), _jsxs(Box, {\n            p: 3,\n            children: [_jsx(Heading, {\n              children: item.title\n            }), _jsxs(HStack, {\n              alignItems: \"center\",\n              children: [_jsxs(Text, {\n                children: [item.times, \" \"]\n              }), _jsxs(Text, {\n                children: [item.portion, \" \"]\n              })]\n            })]\n          })]\n        }), \" \"]\n      })\n    });\n  };\n\n  useEffect(function () {\n    getResepData();\n  }, []);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Header, {\n      title: \"Recipes\",\n      withLogo: true\n    }), isLoading ? _jsx(Center, {\n      flex: 1,\n      children: _jsx(Spinner, {\n        size: \"lg\",\n        color: \"#fe7100\"\n      })\n    }) : _jsx(FlatList, {\n      data: data,\n      keyExtractor: function keyExtractor(item) {\n        return item.key;\n      },\n      renderItem: renderItem,\n      onRefresh: refreshRecipe,\n      refreshing: isFetching\n    })]\n  });\n};\n\nexport default RecipeScreen;","map":{"version":3,"sources":["D:/ITTELKOMSURABAYA/PAB/inphone/screen/Home.js"],"names":["React","useEffect","useState","Center","HStack","Text","Box","Image","AspectRatio","Heading","Spinner","FlatList","Header","RecipeScreen","navigation","data","setData","isLoading","setLoading","isFetching","setFetching","getResepData","fetch","response","json","results","console","error","refreshRecipe","renderItem","item","navigate","resepKey","key","uri","thumb","dificulty","title","times","portion"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Center,\r\n  HStack,\r\n  Text,\r\n  Box,\r\n  Image,\r\n  AspectRatio,\r\n  Heading,\r\n  Spinner,\r\n  FlatList,\r\n} from \"native-base\";\r\nimport { TouchableOpacity } from \"react-native\";\r\nimport { Header } from \"../components\";\r\n\r\nconst RecipeScreen = ({ navigation }) => {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setLoading] = useState(true);\r\n  const [isFetching, setFetching] = useState(false);\r\n\r\n  const getResepData = async () => {\r\n    try {\r\n      const response = await fetch(\"\");\r\n      const json = await response.json();\r\n      setData(json.results);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setLoading(false);\r\n      setFetching(false); // set false untuk menandakan refresh telah berhenti\r\n    }\r\n  };\r\n\r\n  const refreshRecipe = () => {\r\n    setFetching(true);\r\n    getResepData();\r\n  };\r\n\r\n  const renderItem = ({ item }) => {\r\n    return (\r\n      <TouchableOpacity onPress={() => navigation.navigate(\"RecipeDetail\", { resepKey: item.key })}>\r\n        <Box p={5}>\r\n          <Box bg={\"white\"} borderWidth={1} borderColor={\"gray.300\"}>\r\n            {/* Image Section */}\r\n            <Box>\r\n              <AspectRatio w=\"100%\" ratio={16 / 9}>\r\n                <Image source={{ uri: item.thumb }} alt=\"thumbnail resep\" />\r\n              </AspectRatio>\r\n              <Box position={\"absolute\"} bottom={0} left={0} p={2} bg={\"#fe7100\"}>\r\n                <Text>{item.dificulty}</Text>\r\n              </Box>\r\n            </Box>\r\n\r\n            {/* Text Section */}\r\n            <Box p={3}>\r\n              <Heading>{item.title}</Heading>\r\n              <HStack alignItems={\"center\"}>\r\n                <Text>{item.times} </Text>\r\n                <Text>{item.portion} </Text>\r\n              </HStack>\r\n            </Box>\r\n\r\n          </Box> {/* End tag card */}\r\n        </Box>\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    getResepData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header title=\"Recipes\" withLogo={true} />\r\n\r\n      {isLoading ? (\r\n        <Center flex={1}>\r\n          <Spinner size={\"lg\"} color={\"#fe7100\"} />\r\n        </Center>\r\n      ) : (\r\n        <FlatList\r\n          data={data}\r\n          keyExtractor={(item) => item.key}\r\n          renderItem={renderItem}\r\n          onRefresh={refreshRecipe}\r\n          refreshing={isFetching}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RecipeScreen;"]},"metadata":{},"sourceType":"module"}